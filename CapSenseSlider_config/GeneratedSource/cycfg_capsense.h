/*******************************************************************************
* File Name: cycfg_capsense.h
* Version: 1.0
*
* Description:
* CapSense middleware configuration
* This file should not be modified. It was automatically generated by
* CapSense Configurator 1.0.0 build 592
*
********************************************************************************
* Copyright (c) 2018 Cypress Semiconductor.  All rights reserved.
* You may use this file only in accordance with the license, terms, conditions,
* disclaimers, and limitations in the end user license agreement accompanying
* the software package with which this file was provided.
*******************************************************************************/

#if !defined(CYCFG_CAPSENSE_H)
#define CYCFG_CAPSENSE_H

#if defined(__cplusplus)
extern "C" {
#endif

#include <stdint.h>
#include "cy_device_headers.h"
#include "cy_sysint.h"
#include "cy_capsense_common.h"
#include "cy_capsense_lib.h"


#ifndef CY_CAPSENSE_CMOD_PORT
#define CY_CAPSENSE_CMOD_PORT (GPIO_PRT7)
#endif
#ifndef CY_CAPSENSE_CMOD_PIN
#define CY_CAPSENSE_CMOD_PIN (7u)
#endif

#ifndef CY_CAPSENSE_CINTA_PORT
#define CY_CAPSENSE_CINTA_PORT (GPIO_PRT7)
#endif
#ifndef CY_CAPSENSE_CINTA_PIN
#define CY_CAPSENSE_CINTA_PIN (1u)
#endif

#ifndef CY_CAPSENSE_CINTB_PORT
#define CY_CAPSENSE_CINTB_PORT (GPIO_PRT7)
#endif
#ifndef CY_CAPSENSE_CINTB_PIN
#define CY_CAPSENSE_CINTB_PIN (2u)
#endif

#ifndef CY_CAPSENSE_BUTTON0_RX0_PORT
#define CY_CAPSENSE_BUTTON0_RX0_PORT (GPIO_PRT8)
#endif
#ifndef CY_CAPSENSE_BUTTON0_RX0_PIN
#define CY_CAPSENSE_BUTTON0_RX0_PIN (1u)
#endif

#ifndef CY_CAPSENSE_BUTTON0_TX_PORT
#define CY_CAPSENSE_BUTTON0_TX_PORT (GPIO_PRT1)
#endif
#ifndef CY_CAPSENSE_BUTTON0_TX_PIN
#define CY_CAPSENSE_BUTTON0_TX_PIN (0u)
#endif

#ifndef CY_CAPSENSE_LINEARSLIDER0_SNS0_PORT
#define CY_CAPSENSE_LINEARSLIDER0_SNS0_PORT (GPIO_PRT8)
#endif
#ifndef CY_CAPSENSE_LINEARSLIDER0_SNS0_PIN
#define CY_CAPSENSE_LINEARSLIDER0_SNS0_PIN (3u)
#endif

#ifndef CY_CAPSENSE_LINEARSLIDER0_SNS1_PORT
#define CY_CAPSENSE_LINEARSLIDER0_SNS1_PORT (GPIO_PRT8)
#endif
#ifndef CY_CAPSENSE_LINEARSLIDER0_SNS1_PIN
#define CY_CAPSENSE_LINEARSLIDER0_SNS1_PIN (4u)
#endif

#ifndef CY_CAPSENSE_LINEARSLIDER0_SNS2_PORT
#define CY_CAPSENSE_LINEARSLIDER0_SNS2_PORT (GPIO_PRT8)
#endif
#ifndef CY_CAPSENSE_LINEARSLIDER0_SNS2_PIN
#define CY_CAPSENSE_LINEARSLIDER0_SNS2_PIN (5u)
#endif

#ifndef CY_CAPSENSE_LINEARSLIDER0_SNS3_PORT
#define CY_CAPSENSE_LINEARSLIDER0_SNS3_PORT (GPIO_PRT8)
#endif
#ifndef CY_CAPSENSE_LINEARSLIDER0_SNS3_PIN
#define CY_CAPSENSE_LINEARSLIDER0_SNS3_PIN (6u)
#endif

#ifndef CY_CAPSENSE_LINEARSLIDER0_SNS4_PORT
#define CY_CAPSENSE_LINEARSLIDER0_SNS4_PORT (GPIO_PRT8)
#endif
#ifndef CY_CAPSENSE_LINEARSLIDER0_SNS4_PIN
#define CY_CAPSENSE_LINEARSLIDER0_SNS4_PIN (7u)
#endif


#define CY_CAPSENSE_HW CSD0
#define CY_CAPSENSE_VDDA_MV 3300u
#define CY_CAPSENSE_PERI_CLK_HZ 50000000u


/*******************************************************************************
* Enabled Scan Methods
*******************************************************************************/
#define CY_CAPSENSE_CSD_EN (1u)
#define CY_CAPSENSE_CSX_EN (1u)

/*******************************************************************************
* Definitions for number of widgets and sensors
*******************************************************************************/
#define CY_CAPSENSE_TOTAL_WIDGETS (2u)
#define CY_CAPSENSE_TOTAL_CSD_WIDGETS (1u)
#define CY_CAPSENSE_TOTAL_CSD_SENSORS (5u)
#define CY_CAPSENSE_TOTAL_CSX_WIDGETS (1u)
#define CY_CAPSENSE_TOTAL_CSX_NODES (1u)

/*******************************************************************************
* Defines widget IDs
*******************************************************************************/
#define CY_CAPSENSE_BUTTON0_WDGT_ID (0u)
#define CY_CAPSENSE_LINEARSLIDER0_WDGT_ID (1u)

/*******************************************************************************
* Defines sensor IDs
*******************************************************************************/

/* Button0 sensor names */
#define CY_CAPSENSE_BUTTON0_SNS0_ID (0u)

/* Button0 node names */
#define CY_CAPSENSE_BUTTON0_RX0_TX0_ID (0u)

/* Button0 sensor element IDs */
#define CY_CAPSENSE_BUTTON0_RX0_ID (0u)
#define CY_CAPSENSE_BUTTON0_TX0_ID (1u)


/* LinearSlider0 sensor names */
#define CY_CAPSENSE_LINEARSLIDER0_SNS0_ID (0u)
#define CY_CAPSENSE_LINEARSLIDER0_SNS1_ID (1u)
#define CY_CAPSENSE_LINEARSLIDER0_SNS2_ID (2u)
#define CY_CAPSENSE_LINEARSLIDER0_SNS3_ID (3u)
#define CY_CAPSENSE_LINEARSLIDER0_SNS4_ID (4u)


/*******************************************************************************
* Enabled widget types
*******************************************************************************/
#define CY_CAPSENSE_BUTTON_WIDGET_EN (1u)
#define CY_CAPSENSE_SLIDER_WIDGET_EN (1u)
#define CY_CAPSENSE_MATRIX_WIDGET_EN (0u)
#define CY_CAPSENSE_PROXIMITY_WIDGET_EN (0u)
#define CY_CAPSENSE_TOUCHPAD_WIDGET_EN (0u)

#define CY_CAPSENSE_CSD_MATRIX_WIDGET_EN (0u)
#define CY_CAPSENSE_CSD_TOUCHPAD_WIDGET_EN (0u)

#define CY_CAPSENSE_CSX_MATRIX_WIDGET_EN (0u)
#define CY_CAPSENSE_CSX_TOUCHPAD_WIDGET_EN (0u)

/*******************************************************************************
* Centroid APIs
*******************************************************************************/
#define CY_CAPSENSE_CENTROID_EN (1u)
#define CY_CAPSENSE_DIPLEXING_EN (0u)
#define CY_CAPSENSE_TOTAL_DIPLEXED_SLIDERS (0u)
#define CY_CAPSENSE_TOTAL_LINEAR_SLIDERS (1u)
#define CY_CAPSENSE_TOTAL_RADIAL_SLIDERS (0u)
#define CY_CAPSENSE_TOTAL_TOUCHPADS (0u)
#define CY_CAPSENSE_MAX_CENTROID_LENGTH (5u)

/*******************************************************************************
* Enabled sensor types
*******************************************************************************/
#define CY_CAPSENSE_REGULAR_SENSOR_EN (1u)
#define CY_CAPSENSE_PROXIMITY_SENSOR_EN (0u)

/*******************************************************************************
* General widget settings
*******************************************************************************/
#define CY_CAPSENSE_ON_DEBOUNCE_EN (1u)

/*******************************************************************************
* Sensor ganging
*******************************************************************************/
#define CY_CAPSENSE_GANGED_SNS_EN (0u)
#define CY_CAPSENSE_CSD_GANGED_SNS_EN (0u)
#define CY_CAPSENSE_CSX_GANGED_SNS_EN (0u)

/*******************************************************************************
* Centroid position filters
*******************************************************************************/
#define CY_CAPSENSE_POSITION_FILTER_EN (1u)
#define CY_CAPSENSE_POS_MEDIAN_FILTER_EN (0u)
#define CY_CAPSENSE_POS_IIR_FILTER_EN (1u)
#define CY_CAPSENSE_POS_ADAPTIVE_IIR_FILTER_EN (0u)
#define CY_CAPSENSE_POS_AVERAGE_FILTER_EN (0u)
#define CY_CAPSENSE_POS_JITTER_FILTER_EN (0u)
#define CY_CAPSENSE_CENTROID_3X3_CSD_EN (0u)
#define CY_CAPSENSE_CENTROID_5X5_CSD_EN (0u)
#define CY_CAPSENSE_CSD_5X5_MAX_FINGERS (1u)
#define CY_CAPSENSE_MAX_SENSORS_PER_5X5_TOUCHPAD (1u)
#define CY_CAPSENSE_REGULAR_RC_FILTER_EN (1u)
#define CY_CAPSENSE_PROX_RC_FILTER_EN (0u)


/*******************************************************************************
* Total number of all used electrodes (NOT unique)
*******************************************************************************/
#define CY_CAPSENSE_TOTAL_ELECTRODES (7u)

/*******************************************************************************
* Total number of used physical IOs (unique)
*******************************************************************************/
#define CY_CAPSENSE_TOTAL_IO_CNT (7u)

/*******************************************************************************
* General settings
*******************************************************************************/
#define CY_CAPSENSE_BASELINE_TYPE (CY_CAPSENSE_IIR_BASELINE)
#define CY_CAPSENSE_BLOCK_OFF_AFTER_SCAN_EN (0u)
#define CY_CAPSENSE_MULTI_FREQ_SCAN_EN (0u)
#define CY_CAPSENSE_PROX_IIR_BL_N (1u)
#define CY_CAPSENSE_PROX_IIR_RC_N (128u)
#define CY_CAPSENSE_PROX_RC_AVERAGE_FILTER_EN (0u)
#define CY_CAPSENSE_PROX_RC_IIR_FILTER_EN (0u)
#define CY_CAPSENSE_PROX_RC_MEDIAN_FILTER_EN (0u)
#define CY_CAPSENSE_REGULAR_IIR_BL_N (1u)
#define CY_CAPSENSE_REGULAR_IIR_RC_N (128u)
#define CY_CAPSENSE_REGULAR_RC_AVERAGE_FILTER_EN (0u)
#define CY_CAPSENSE_REGULAR_RC_IIR_FILTER_EN (0u)
#define CY_CAPSENSE_REGULAR_RC_MEDIAN_FILTER_EN (1u)
#define CY_CAPSENSE_SELF_TEST_EN (0u)
#define CY_CAPSENSE_SENSOR_AUTO_RESET_EN (1u)
#define CY_CAPSENSE_SENSOR_AUTO_RESET_METHOD (CY_CAPSENSE_AUTO_RESET_METHOD_LEGACY)
#define CY_CAPSENSE_SLIDER_MULTIPLIER (CY_CAPSENSE_SNS_NUM_MINUS_1)
#define CY_CAPSENSE_TOUCHPAD_MULTIPLIER (CY_CAPSENSE_SNS_NUM_MINUS_1)

/*******************************************************************************
* CSD settings
*******************************************************************************/
#define CY_CAPSENSE_CSD_AUTOTUNE (CY_CAPSENSE_CSD_SS_HWTH_EN)
#define CY_CAPSENSE_CSD_COMMON_SNS_CLK_EN (0u)
#define CY_CAPSENSE_CSD_IDAC_AUTOCAL_EN (1u)
#define CY_CAPSENSE_CSD_IDAC_COMP_EN (1u)
#define CY_CAPSENSE_CSD_IDAC_CONFIG (CY_CAPSENSE_IDAC_SOURCING)
#define CY_CAPSENSE_CSD_IDAC_GAIN (CY_CAPSENSE_IDAC_GAIN_MEDIUM)
#define CY_CAPSENSE_CSD_INACTIVE_SNS_CONNECTION (CY_CAPSENSE_SNS_CONNECTION_GROUND)
#define CY_CAPSENSE_CSD_MOD_CLK_DIVIDER (8u)
#define CY_CAPSENSE_CSD_SHIELD_DELAY (CY_CAPSENSE_NO_DELAY)
#define CY_CAPSENSE_CSD_SHIELD_EN (0u)
#define CY_CAPSENSE_CSD_SHIELD_SWITCH_RES (CY_CAPSENSE_SHIELD_SW_RES_MEDIUM)
#define CY_CAPSENSE_CSD_SHIELD_TANK_EN (0u)
#define CY_CAPSENSE_CSD_SNS_CLK_DIVIDER (8u)
#define CY_CAPSENSE_CSD_SNS_CLK_SOURCE (CY_CAPSENSE_CLK_SOURCE_PRSAUTO)
#define CY_CAPSENSE_CSD_TOTAL_SHIELD_COUNT (1u)

/*******************************************************************************
* CSX settings
*******************************************************************************/
#define CY_CAPSENSE_CSX_COMMON_TX_CLK_EN (0u)
#define CY_CAPSENSE_CSX_IDAC_AUTOCAL_EN (1u)
#define CY_CAPSENSE_CSX_IDAC_GAIN (CY_CAPSENSE_IDAC_GAIN_MEDIUM)
#define CY_CAPSENSE_CSX_MAX_FINGERS (1u)
#define CY_CAPSENSE_CSX_MOD_CLK_DIVIDER (2u)
#define CY_CAPSENSE_CSX_TX_CLK_DIVIDER (42u)
#define CY_CAPSENSE_CSX_TX_CLK_SOURCE (CY_CAPSENSE_CLK_SOURCE_PRSAUTO)
#define CY_CAPSENSE_CONFIG_ID                   (0x0000u)
#define CY_CAPSENSE_DEVICE_ID                   (0x0000u)
#define CY_CAPSENSE_HW_CLOCK                    (0x0000u)

#define CY_CAPSENSE_CSD_CSX_EN                  (CY_CAPSENSE_CSD_EN && CY_CAPSENSE_CSX_EN)

/*******************************************************************************
* Total number of CSD sensors + CSX nodes
*******************************************************************************/
#define CY_CAPSENSE_TOTAL_SENSORS               (CY_CAPSENSE_TOTAL_CSD_SENSORS + \
                                                 CY_CAPSENSE_TOTAL_CSX_NODES)

/*******************************************************************************
* Array length for widget status registers
*******************************************************************************/
#define CY_CAPSENSE_WDGT_STATUS_WORDS        \
                        (((uint8)((CY_CAPSENSE_TOTAL_WIDGETS - 1u) / 32u)) + 1u)

/* Defines number of scan frequencies */
#if (CY_CAPSENSE_DISABLE != CY_CAPSENSE_MULTI_FREQ_SCAN_EN)
    #define CY_CAPSENSE_NUM_SCAN_FREQS          (3u)
#else
    #define CY_CAPSENSE_NUM_SCAN_FREQS          (1u)
#endif /* #if (CY_CAPSENSE_DISABLE != CY_CAPSENSE_MULTI_FREQ_SCAN_EN) */

#define CY_CAPSENSE_THRESHOLD_SIZE              CY_CAPSENSE_SIZE_16BITS
typedef uint16_t CY_CAPSENSE_THRESHOLD_TYPE;

#define CY_CAPSENSE_LOW_BSLN_RST_SIZE       (CY_CAPSENSE_SIZE_16BITS)
typedef uint16 CY_CAPSENSE_LOW_BSLN_RST_TYPE;

/* Coefficient to define touch threshold for proximity sensors */
#define CY_CAPSENSE_PROX_TOUCH_COEFF            (300u)


/*******************************************************************************
* General Filter Constants
*******************************************************************************/

/* IIR baseline filter algorithm for regular sensors*/
#define CY_CAPSENSE_REGULAR_IIR_BL_TYPE         (CY_CAPSENSE_IIR_FILTER_PERFORMANCE)

/* IIR baseline coefficients for regular sensors */
#define CY_CAPSENSE_REGULAR_IIR_BL_SHIFT        (8u)

/* IIR baseline filter algorithm for proximity sensors*/
#define CY_CAPSENSE_PROX_IIR_BL_TYPE            (CY_CAPSENSE_IIR_FILTER_PERFORMANCE)

/* IIR baseline coefficients for proximity sensors */
#define CY_CAPSENSE_PROX_IIR_BL_SHIFT           (8u)

/* Regular sensor raw count filters */
#define CY_CAPSENSE_REGULAR_RC_CUSTOM_FILTER_EN (0u)
#define CY_CAPSENSE_REGULAR_RC_ALP_FILTER_EN    (0u)

/* Proximity sensor raw count filters */
#define CY_CAPSENSE_PROX_RC_CUSTOM_FILTER_EN    (0u)
#define CY_CAPSENSE_PROX_RC_ALP_FILTER_EN       (0u)

/* Raw count filters */
#define CY_CAPSENSE_RC_FILTER_EN                (CY_CAPSENSE_REGULAR_RC_FILTER_EN || CY_CAPSENSE_PROX_RC_FILTER_EN)

/* ALP filters */
#define CY_CAPSENSE_ALP_FILTER_EN               (0u)
#define CY_CAPSENSE_REGULAR_RC_ALP_FILTER_COEFF (2u)
#define CY_CAPSENSE_PROX_RC_ALP_FILTER_COEFF    (2u)

/* IIR raw count filter algorithm for regular sensors */
#define CY_CAPSENSE_REGULAR_IIR_RC_TYPE         (CY_CAPSENSE_IIR_FILTER_STANDARD)

/* IIR raw count filter coefficients for regular sensors */
#define CY_CAPSENSE_REGULAR_IIR_RC_SHIFT        (0u)

/* IIR raw count filter algorithm for proximity sensors*/
#define CY_CAPSENSE_PROX_IIR_RC_TYPE            (CY_CAPSENSE_IIR_FILTER_STANDARD)

/* IIR raw count filter coefficients for proximity sensors */
#define CY_CAPSENSE_PROX_IIR_RC_SHIFT           (0u)

/* Order of regular sensor average filter */
#define CY_CAPSENSE_REGULAR_AVERAGE_LEN         (CY_CAPSENSE_AVERAGE_FILTER_LEN_4)

/* Order of proximity sensor average filter */
#define CY_CAPSENSE_PROX_AVERAGE_LEN            (CY_CAPSENSE_AVERAGE_FILTER_LEN_4)

/* Widget baseline coefficient enable */
#define CY_CAPSENSE_WD_BSLN_COEFF_EN            (0u)

#define CY_CAPSENSE_POS_IIR_COEFF               (128u)
#define CY_CAPSENSE_POS_IIR_RESET_RADIAL_SLIDER (35u)

#define CY_CAPSENSE_NUM_CENTROIDS               (1u)


/*******************************************************************************
* CSD/CSX Common settings
*******************************************************************************/

#define CY_CAPSENSE_CSD_VREF_SOURCE             (CY_CAPSENSE_VREF_SRSS)
#define CY_CAPSENSE_CSD_IREF_SOURCE             (CY_CAPSENSE_IREF_SRSS)

#define CY_CAPSENSE_LP_MODE_EN                  (0u)

#define CY_CAPSENSE_BLOCK_ANALOG_WAKEUP_DELAY_US (0u)

/*******************************************************************************
* CSD Specific settings
*******************************************************************************/

/* CSD scan method settings */
#define CY_CAPSENSE_CSD_RAWCOUNT_CAL_LEVEL      (85u)
#define CY_CAPSENSE_CSD_DUALIDAC_LEVEL          (50u)
#define CY_CAPSENSE_CSD_PRESCAN_SETTLING_TIME   (5u)
#define CY_CAPSENSE_CSD_SNSCLK_R_CONST          (1000u)
#define CY_CAPSENSE_CSD_VREF_MV                 (1219u)

/* CSD settings */
#define CY_CAPSENSE_CSD_ANALOG_STARTUP_DELAY_US (0u)
#define CY_CAPSENSE_CSD_FINE_INIT_TIME          (10u)
#define CY_CAPSENSE_CSD_DEDICATED_IDAC_COMP_EN  (1u)
#define CY_CAPSENSE_CSD_AUTO_ZERO_EN            (0u)
#define CY_CAPSENSE_CSD_AUTO_ZERO_TIME          (15Lu)
#define CY_CAPSENSE_CSD_NOISE_METRIC_EN         (0u)
#define CY_CAPSENSE_CSD_NOISE_METRIC_TH         (1Lu)
#define CY_CAPSENSE_CSD_INIT_SWITCH_RES         (CY_CAPSENSE_INIT_SW_RES_MEDIUM)
#define CY_CAPSENSE_CSD_SENSING_METHOD          (0)
#define CY_CAPSENSE_CSD_GAIN                    (20Lu)

#define CY_CAPSENSE_CSD_MFS_DIVIDER_OFFSET_F1   (1u)
#define CY_CAPSENSE_CSD_MFS_DIVIDER_OFFSET_F2   (2u)

/*******************************************************************************
* CSX Specific settings
*******************************************************************************/

/* CSX scan method settings */
#define CY_CAPSENSE_CSX_MAX_LOCAL_PEAKS         (5u)
#define CY_CAPSENSE_CSX_IDAC_BITS_USED          (7u)
#define CY_CAPSENSE_CSX_RAWCOUNT_CAL_LEVEL      (40u)
#define CY_CAPSENSE_CSX_SKIP_OVSMPL_SPECIFIC_NODES (0u)
#define CY_CAPSENSE_CSX_MULTIPHASE_TX_EN        (0u)
#define CY_CAPSENSE_CSX_MAX_TX_PHASE_LENGTH     (0u)

/* CSX settings */
#define CY_CAPSENSE_CSX_ANALOG_STARTUP_DELAY_US (0u)
#define CY_CAPSENSE_CSX_AUTO_ZERO_EN            (0u)
#define CY_CAPSENSE_CSX_AUTO_ZERO_TIME          (15u)
#define CY_CAPSENSE_CSX_FINE_INIT_TIME          (4u)
#define CY_CAPSENSE_CSX_NOISE_METRIC_EN         (0u)
#define CY_CAPSENSE_CSX_NOISE_METRIC_TH         (1u)
#define CY_CAPSENSE_CSX_INIT_SWITCH_RES         (CY_CAPSENSE_INIT_SW_RES_MEDIUM)
#define CY_CAPSENSE_CSX_SCAN_SWITCH_RES         (CY_CAPSENSE_SCAN_SW_RES_LOW)
#define CY_CAPSENSE_CSX_INIT_SHIELD_SWITCH_RES  (CY_CAPSENSE_INIT_SHIELD_SW_RES_HIGH)
#define CY_CAPSENSE_CSX_SCAN_SHIELD_SWITCH_RES  (CY_CAPSENSE_SCAN_SHIELD_SW_RES_LOW)

#define CY_CAPSENSE_CSX_MFS_DIVIDER_OFFSET_F1   (1u)
#define CY_CAPSENSE_CSX_MFS_DIVIDER_OFFSET_F2   (2u)

/* Gesture parameters */
#define CY_CAPSENSE_GES_GLOBAL_EN               (0u)
#define CY_CAPSENSE_GESTURE_EN_WIDGET_ID        (0u)
#define CY_CAPSENSE_CLICK_EN                    (0u)
#define CY_CAPSENSE_ONE_FINGER_EDGE_SWIPE_EN    (0u)
#define CY_CAPSENSE_ONE_FINGER_FLICK_EN         (0u)
#define CY_CAPSENSE_ONE_FINGER_ROTATE_EN        (0u)
#define CY_CAPSENSE_ONE_FINGER_SCROLL_EN        (0u)
#define CY_CAPSENSE_TWO_FINGER_SCROLL_EN        (0u)
#define CY_CAPSENSE_TWO_FINGER_ZOOM_EN          (0u)
#define CY_CAPSENSE_ONE_FINGER_EDGE_SWIPE_COMPLETE_TIMEOUT (2000u)
#define CY_CAPSENSE_TIMESTAMP_INTERVAL          (1u)
#define CY_CAPSENSE_BALLISTIC_MULTIPLIER_EN     (0u)
#define CY_CAPSENSE_BALLISTIC_EN_WIDGET_ID      (0u)

/* Defines size of Sensor Status Register in Data Structure */
#define CY_CAPSENSE_SNS_STS_TYPE                uint8_t

/*******************************************************************************
* Built-In Self-Test Configuration
*******************************************************************************/
#define CY_CAPSENSE_TST_GLOBAL_CRC_EN           (0Lu)
#define CY_CAPSENSE_TST_WDGT_CRC_EN             (0Lu)
#define CY_CAPSENSE_TST_BSLN_DUPLICATION_EN     (0Lu)
#define CY_CAPSENSE_TST_BSLN_RAW_OUT_RANGE_EN   (0Lu)
#define CY_CAPSENSE_TST_SNS_SHORT_EN            (0Lu)
#define CY_CAPSENSE_TST_SNS2SNS_SHORT_EN        (0Lu)
#define CY_CAPSENSE_TST_SNS_CAP_EN              (0Lu)
#define CY_CAPSENSE_TST_SH_CAP_EN               (0Lu)
#define CY_CAPSENSE_TST_EXTERNAL_CAP_EN         (0Lu)
#define CY_CAPSENSE_TST_INTERNAL_CAP_EN         (0Lu)
#define CY_CAPSENSE_TST_VDDA_EN                 (0Lu)
#define CY_CAPSENSE_TST_FINE_INIT_TIME          (1Lu)

#define CY_CAPSENSE_TST_ANALOG_STARTUP_DELAY_US (23u)

#define CY_CAPSENSE_SLIDER_MULT_METHOD          (0u)
#define CY_CAPSENSE_TOUCHPAD_MULT_METHOD        (0u)

#if (0u != CY_CAPSENSE_POSITION_FILTER_EN)
typedef struct
{
    #if (0u != CY_CAPSENSE_POS_MEDIAN_FILTER_EN)
        uint16 posMedianZ1;
        uint16 posMedianZ2;
    #endif /* #if (0u != CY_CAPSENSE_POS_MEDIAN_FILTER_EN) */

    #if (0u != CY_CAPSENSE_POS_IIR_FILTER_EN)
        uint16 posIIR;
    #endif /* #if (0u != CY_CAPSENSE_POS_IIR_FILTER_EN) */

    #if (0u != CY_CAPSENSE_POS_ADAPTIVE_IIR_FILTER_EN)
        uint16 posAIIR;
    #endif /* (0u != CY_CAPSENSE_POS_ADAPTIVE_IIR_FILTER_EN) */

    #if (0u != CY_CAPSENSE_POS_AVERAGE_FILTER_EN)
        uint16 posAverage;
    #endif /* #if (0u != CY_CAPSENSE_POS_AVERAGE_FILTER_EN) */

    #if (0u != CY_CAPSENSE_POS_JITTER_FILTER_EN)
        uint16 posJitter;
    #endif /* #if (0u != CY_CAPSENSE_POS_JITTER_FILTER_EN) */

    #if (0u != CY_CAPSENSE_POS_ADAPTIVE_IIR_FILTER_EN)
        uint8 posAIIRCoeff;
    #endif /* (0u != CY_CAPSENSE_POS_ADAPTIVE_IIR_FILTER_EN) */
} cy_stc_capsense_slider_pos_history_t;

typedef struct
{
    cy_stc_capsense_slider_pos_history_t xPos;
    cy_stc_capsense_slider_pos_history_t yPos;
} cy_stc_capsense_touchpad_pos_history_t;

#endif /* (0u != CY_CAPSENSE_POSITION_FILTER_EN) */

typedef struct
{
    cy_stc_capsense_touchpad_peak_t touch[CY_CAPSENSE_CSX_MAX_LOCAL_PEAKS];
    uint8_t  touchNum;
} cy_stc_capsense_touchpad_data_t;

typedef struct
{
    uint16_t resolution;
    CY_CAPSENSE_THRESHOLD_TYPE fingerTh;
    uint8_t  noiseTh;
    uint8_t  nNoiseTh;
    uint8_t  hysteresis;
    uint8_t  onDebounce;
    CY_CAPSENSE_LOW_BSLN_RST_TYPE lowBslnRst;
    uint8_t bslnCoeff;
    uint8_t  idacMod [CY_CAPSENSE_NUM_SCAN_FREQS];
    uint8_t  rowIdacMod [CY_CAPSENSE_NUM_SCAN_FREQS];
    uint16_t snsClk;
    uint16_t rowSnsClk;
    uint8_t  snsClkSource;
    uint8_t  rowSnsClkSource;
    uint16_t fingerCap;
    uint16_t sigPFC;
} cy_stc_capsense_ram_wd_base_t;

typedef cy_stc_capsense_ram_wd_base_t cy_stc_capsense_ram_wd_button_t;
typedef cy_stc_capsense_ram_wd_base_t cy_stc_capsense_ram_wd_csx_matrix_t;

typedef struct
{
    uint16_t resolution;
    CY_CAPSENSE_THRESHOLD_TYPE fingerTh;
    uint8_t  noiseTh;
    uint8_t  nNoiseTh;
    uint8_t  hysteresis;
    uint8_t  onDebounce;
    CY_CAPSENSE_LOW_BSLN_RST_TYPE lowBslnRst;
    uint8_t bslnCoeff;
    uint8_t  idacMod [CY_CAPSENSE_NUM_SCAN_FREQS];
    uint8_t  rowIdacMod [CY_CAPSENSE_NUM_SCAN_FREQS];
    uint16_t snsClk;
    uint16_t rowSnsClk;
    uint8_t  snsClkSource;
    uint8_t  rowSnsClkSource;
    uint16_t fingerCap;
    uint16_t sigPFC;
    uint16_t position [CY_CAPSENSE_NUM_CENTROIDS];
} cy_stc_capsense_ram_wd_slider_t;

typedef struct
{
    uint16_t resolution;
    CY_CAPSENSE_THRESHOLD_TYPE fingerTh;
    uint8_t  noiseTh;
    uint8_t  nNoiseTh;
    uint8_t  hysteresis;
    uint8_t  onDebounce;
    CY_CAPSENSE_LOW_BSLN_RST_TYPE lowBslnRst;
    uint8_t bslnCoeff;
    uint8_t  idacMod [CY_CAPSENSE_NUM_SCAN_FREQS];
    uint8_t  rowIdacMod [CY_CAPSENSE_NUM_SCAN_FREQS];
    uint16_t snsClk;
    uint16_t rowSnsClk;
    uint8_t  snsClkSource;
    uint8_t  rowSnsClkSource;
    uint16_t fingerCap;
    uint16_t sigPFC;
    uint8_t  posCol;
    uint8_t  posRow;
    uint8_t  posSnsId;
} cy_stc_capsense_ram_wd_csd_matrix_t;

typedef struct
{
    uint16_t resolution;
    CY_CAPSENSE_THRESHOLD_TYPE fingerTh;
    uint8_t  noiseTh;
    uint8_t  nNoiseTh;
    uint8_t  hysteresis;
    uint8_t  onDebounce;
    CY_CAPSENSE_LOW_BSLN_RST_TYPE lowBslnRst;
    uint8_t bslnCoeff;
    uint8_t  idacMod [CY_CAPSENSE_NUM_SCAN_FREQS];
    uint8_t  rowIdacMod [CY_CAPSENSE_NUM_SCAN_FREQS];
    uint16_t snsClk;
    uint16_t rowSnsClk;
    uint8_t  snsClkSource;
    uint8_t  rowSnsClkSource;
    uint16_t fingerCap;
    uint16_t sigPFC;
    uint16_t posX;
    uint16_t posY;
} cy_stc_capsense_ram_wd_csd_touchpad_t;

typedef struct
{
    uint16_t resolution;
    CY_CAPSENSE_THRESHOLD_TYPE fingerTh;
    uint8_t  noiseTh;
    uint8_t  nNoiseTh;
    uint8_t  hysteresis;
    uint8_t  onDebounce;
    CY_CAPSENSE_LOW_BSLN_RST_TYPE lowBslnRst;
    uint8_t bslnCoeff;
    uint8_t  idacMod [CY_CAPSENSE_NUM_SCAN_FREQS];
    uint8_t  rowIdacMod [CY_CAPSENSE_NUM_SCAN_FREQS];
    uint16_t snsClk;
    uint16_t rowSnsClk;
    uint8_t  snsClkSource;
    uint8_t  rowSnsClkSource;
    uint16_t fingerCap;
    uint16_t sigPFC;
    CY_CAPSENSE_THRESHOLD_TYPE proxTouchTh;
} cy_stc_capsense_ram_wd_proximity_t;

typedef struct
{
    uint16_t x;
    uint16_t y;
    uint8_t  z;
    uint8_t  id;
} cy_stc_capsense_touchpad_touch_t;

typedef struct
{
    uint16_t resolution;
    CY_CAPSENSE_THRESHOLD_TYPE fingerTh;
    uint8_t  noiseTh;
    uint8_t  nNoiseTh;
    uint8_t  hysteresis;
    uint8_t  onDebounce;
    CY_CAPSENSE_LOW_BSLN_RST_TYPE lowBslnRst;
    uint8_t bslnCoeff;
    uint8_t  idacMod [CY_CAPSENSE_NUM_SCAN_FREQS];
    uint8_t  rowIdacMod [CY_CAPSENSE_NUM_SCAN_FREQS];
    uint16_t snsClk;
    uint16_t rowSnsClk;
    uint8_t  snsClkSource;
    uint8_t  rowSnsClkSource;
    uint16_t fingerCap;
    uint16_t sigPFC;
    uint32_t velocity;
    cy_stc_capsense_touchpad_touch_t touch [CY_CAPSENSE_CSX_MAX_FINGERS];
} cy_stc_capsense_ram_wd_csx_touchpad_t;

typedef struct
{
    uint16_t raw [CY_CAPSENSE_NUM_SCAN_FREQS];
    uint16_t bsln [CY_CAPSENSE_NUM_SCAN_FREQS];
    uint8_t  bslnExt [CY_CAPSENSE_NUM_SCAN_FREQS];
    CY_CAPSENSE_THRESHOLD_TYPE diff;
    CY_CAPSENSE_LOW_BSLN_RST_TYPE negBslnRstCnt [CY_CAPSENSE_NUM_SCAN_FREQS];
    uint8_t  idacComp [CY_CAPSENSE_NUM_SCAN_FREQS];
} cy_stc_capsense_ram_sns_t;

/***************************************************************************//**
* \brief Declares filter channel structure for regular sensors
*******************************************************************************/
typedef struct
{
    /**
     *  IIR filter history
     */
    uint16_t iirHistory;

    /**
     *  IIR filter history low byte in case Performance method is chosen for
     *  calculation fraction storage
     */
    uint8_t  iirHistoryLow;

    /**
     *  Median filter history array contains two words per sensors
     */
    uint16_t medHistory[CY_CAPSENSE_REGULAR_MEDIAN_LEN];

    /**
     *  Average filter history array contains one or three words per sensors
     */
    uint16_t avgHistory[CY_CAPSENSE_REGULAR_AVERAGE_LEN];
} cy_stc_capsense_regular_fltr_channel_t;

/***************************************************************************//**
* \brief Declares filter channel structure for proximity sensors
*******************************************************************************/
typedef struct
{
    /**
     *  IIR filter history
     */
    uint16_t iirHistory;

    /**
     *  IIR filter history low byte in case Performance method is chosen for
     *  calculation fraction storage
     */
    uint8_t  iirHistoryLow;

    /**
     *  Median filter history array contains two words per sensors
     */
    uint16_t medHistory[CY_CAPSENSE_PROX_MEDIAN_LEN];

    /**
     *  Average filter history array contains one or three words per sensors
     */
    uint16_t avgHistory[CY_CAPSENSE_PROX_AVERAGE_LEN];
} cy_stc_capsense_prox_fltr_channel_t;

/***************************************************************************//**
* \brief Declares filter structure for regular sensors
*******************************************************************************/
typedef struct
{
    /**
     *  Array of cy_stc_capsense_regular_fltr_channel_t for each available scan frequency
     */
    cy_stc_capsense_regular_fltr_channel_t regularChannel[CY_CAPSENSE_NUM_SCAN_FREQS];
} cy_stc_capsense_regular_fltr_t;

/***************************************************************************//**
* \brief Declares filter structure for proximity sensors
*******************************************************************************/
typedef struct
{
    /**
     *  Array of cy_stc_capsense_prox_fltr_channel_t for each available scan frequency
     */
    cy_stc_capsense_prox_fltr_channel_t proxChannel[CY_CAPSENSE_NUM_SCAN_FREQS];
} cy_stc_capsense_prox_fltr_t;

/***************************************************************************//**
* \brief Declares union for filter structure variants
*******************************************************************************/
typedef union
{
    /**
     *  Pointer to void type
     */
    void *ptr;

    /**
     *  Pointer to cy_stc_capsense_regular_fltr_t type
     */
    cy_stc_capsense_regular_fltr_t *ptrRegular;

    /**
     *  Pointer to cy_stc_capsense_prox_fltr_t type
     */
    cy_stc_capsense_prox_fltr_t *ptrProx;
} CY_CAPSENSE_PTR_FILTER_VARIANT;

typedef struct
{
    cy_stc_capsense_ram_sns_t button0[1u];
    cy_stc_capsense_ram_sns_t linearslider0[5u];
} cy_stc_capsense_ram_sns_list_t;

typedef struct
{
    cy_stc_capsense_ram_wd_button_t button0;
    cy_stc_capsense_ram_wd_slider_t linearslider0;
} cy_stc_capsense_ram_wd_list_t;

typedef struct
{
    uint8_t notUsed;
} cy_stc_capsense_flash_sns_list_t;

typedef struct
{
    uint8 button0[1u];
    uint8 linearslider0[1u];
} cy_stc_capsense_debounce_list_t;

typedef struct
{
    cy_stc_capsense_smartsense_csd_noise_envelope_t button0[1u];
    cy_stc_capsense_smartsense_csd_noise_envelope_t linearslider0[5u];
} cy_stc_capsense_smartsense_csd_noise_envelope_list_t;

typedef struct
{
    cy_stc_capsense_regular_fltr_t button0[1u];
    cy_stc_capsense_regular_fltr_t linearslider0[5u];
} cy_stc_capsense_fltr_history_list_t;

typedef struct
{
    cy_stc_capsense_slider_pos_history_t linearslider0;
} cy_stc_capsense_pos_history_list_t;



typedef struct
{
    uint16_t configId;
    uint16_t deviceId;
    uint16_t hwClock;
    uint16_t tunerCmd;
    uint16_t scanCounter;
    volatile uint32_t status;
    uint32_t wdgtEnable [CY_CAPSENSE_WDGT_STATUS_WORDS];
    uint32_t wdgtStatus [CY_CAPSENSE_WDGT_STATUS_WORDS];
    uint32_t snsStatus [CY_CAPSENSE_TOTAL_WIDGETS];
    uint8_t  modCsdClk;
    uint8_t  modCsxClk;
    uint16_t snsCsdClk;
    uint16_t snsCsxClk;
    cy_stc_capsense_ram_wd_list_t wdgtList;
    cy_stc_capsense_ram_sns_list_t snsList;
    uint8_t  snrTestWidgetId;
    uint8_t  snrTestSensorId;
    uint16_t snrTestScanCounter;
    uint16_t snrTestRawCount [CY_CAPSENSE_NUM_SCAN_FREQS];
} cy_stc_capsense_ram_t;

typedef struct
{
    void const * ptr2SnsFlash;
    void *   ptr2WdgtRam;
    cy_stc_capsense_ram_sns_t * ptr2SnsRam;
    void *   ptr2FltrHistory;
    uint8_t * ptr2DebounceArr;
    uint32_t staticConfig;
    uint16_t totalNumSns;
    uint8_t  wdgtType;
    uint8_t  senseMethod;
    uint8_t  numCols;
    uint8_t  numRows;
    uint16_t xResolution;
    uint16_t yResolution;
    uint32_t xCentroidMultiplier;
    uint32_t yCentroidMultiplier;
    cy_stc_capsense_smartsense_csd_noise_envelope_t * ptr2NoiseEnvlp;
    const uint8_t *ptr2DiplexTable;
    void *   ptr2CsxTouchpad;
    void *   ptr2PosHistory;
    uint8_t  iirFilterCoeff;
} cy_stc_capsense_flash_wd_t;

/***************************************************************************//**
* \brief Declares top-level Flash Data Structure
*******************************************************************************/
typedef struct
{
    /**
     *  Array of flash widget objects
     */
    cy_stc_capsense_flash_wd_t wdgtArray[CY_CAPSENSE_TOTAL_WIDGETS];
} cy_stc_capsense_flash_t;

/*******************************************************************************
* \brief Declares active sensor details
*******************************************************************************/
typedef struct
{
    /**
     * Active sensor widget ID.
     */
    volatile uint8_t widgetIndex;     /* Index of the scanning widget */
    /**
     * Active sensor ID.
     */
    volatile uint8_t sensorIndex;     /* Index of the scanning sensor */

    #if ((CY_CAPSENSE_ENABLE == CY_CAPSENSE_CSD_CSX_EN) || \
         (CY_CAPSENSE_ENABLE == CY_CAPSENSE_SELF_TEST_EN))
        /**
         * Active sensor sensing method.
         */
        cy_en_capsense_sensing_method_t currentSenseMethod;
    #endif

    #if(CY_CAPSENSE_ENABLE == CY_CAPSENSE_MULTI_FREQ_SCAN_EN)
        /**
         * Active sensor multi-frequency scan channel index.
         */
        uint8_t scanFreqIndex;
    #else
        /**
         * Active sensor multi-frequency scan channel index.
         */
        const uint8_t scanFreqIndex;
    #endif

    /**
     * Pointer to active sensor RAM sensor structure.
     */
    cy_stc_capsense_ram_sns_t *curRamSnsPtr;

    #if (CY_CAPSENSE_ENABLE == CY_CAPSENSE_CSD_GANGED_SNS_EN)
        /**
         * Pointer to active sensor flash sensor structure.
         */
        cy_stc_capsense_flash_sns_t const *curFlashSnsPtr;
    #endif

    #if ((CY_CAPSENSE_ENABLE == CY_CAPSENSE_CSD_GANGED_SNS_EN) || \
         (CY_CAPSENSE_ENABLE == CY_CAPSENSE_CSX_EN))
        /**
         * Pointer to active sensor flash widget structure.
         */
        cy_stc_capsense_flash_wd_t const *curFlashWdgtPtr;
    #endif
} cy_stc_active_sns_t;

/*******************************************************************************
* API Constants
*******************************************************************************/
#define CY_CAPSENSE_CSD_SCANSPEED_DIVIDER CY_CAPSENSE_CSD_MOD_CLK_DIVIDER
#define CY_CAPSENSE_CSX_SCANSPEED_DIVIDER CY_CAPSENSE_CSX_MOD_CLK_DIVIDER

/*******************************************************************************
* Defines shift/mask values for data structure register bit fields
*******************************************************************************/

/* STATUS bit fields */

/* Bits 0-6: The widget currently selected for CSD0 */
#define CY_CAPSENSE_STATUS_WDGT0_SIZE     (0x0000007FLu)
#define CY_CAPSENSE_STATUS_WDGT0_SHIFT    (0u)
#define CY_CAPSENSE_STATUS_WDGT0_MASK     (CY_CAPSENSE_STATUS_WDGT0_SIZE << CY_CAPSENSE_STATUS_WDGT0_SHIFT)

/* Bit 7: The CSD0 block status */
#define CY_CAPSENSE_STATUS_CSD0_SIZE      (0x00000001Lu)
#define CY_CAPSENSE_STATUS_CSD0_SHIFT     (7u)
#define CY_CAPSENSE_STATUS_CSD0_MASK      (CY_CAPSENSE_STATUS_CSD0_SIZE << CY_CAPSENSE_STATUS_CSD0_SHIFT)

/* Bits 8-14: The widget currently selected for CSD1 */
#define CY_CAPSENSE_STATUS_WDGT1_SIZE     (0x0000007FLu)
#define CY_CAPSENSE_STATUS_WDGT1_SHIFT    (8u)
#define CY_CAPSENSE_STATUS_WDGT1_MASK     (CY_CAPSENSE_STATUS_WDGT1_SIZE << CY_CAPSENSE_STATUS_WDGT1_SHIFT)

/* Bit 15: The CSD1 block status */
#define CY_CAPSENSE_STATUS_CSD1_SIZE      (0x00000001Lu)
#define CY_CAPSENSE_STATUS_CSD1_SHIFT     (15u)
#define CY_CAPSENSE_STATUS_CSD1_MASK      (CY_CAPSENSE_STATUS_CSD1_SIZE << CY_CAPSENSE_STATUS_CSD1_SHIFT)

/* Bit 16: The WIDGET BUSY flag status for CSD0 */
#define CY_CAPSENSE_STATUS_WDGT0_BUSY_SIZE (0x00000001Lu)
#define CY_CAPSENSE_STATUS_WDGT0_BUSY_SHIFT (16u)
#define CY_CAPSENSE_STATUS_WDGT0_BUSY_MASK (CY_CAPSENSE_STATUS_WDGT0_BUSY_SIZE << CY_CAPSENSE_STATUS_WDGT0_BUSY_SHIFT)

/* Bit 17: The WIDGET BUSY flag status for CSD1 */
#define CY_CAPSENSE_STATUS_WDGT1_BUSY_SIZE (0x00000001Lu)
#define CY_CAPSENSE_STATUS_WDGT1_BUSY_SHIFT (17u)
#define CY_CAPSENSE_STATUS_WDGT1_BUSY_MASK (CY_CAPSENSE_STATUS_WDGT1_BUSY_SIZE << CY_CAPSENSE_STATUS_WDGT1_BUSY_SHIFT)

/* Bits 18-23: Reserved */

/* Bits 24-31: CapSense middleware error code */
#define CY_CAPSENSE_STATUS_ERR_SIZE       (0x000000FFLu)
#define CY_CAPSENSE_STATUS_ERR_SHIFT      (24u)
#define CY_CAPSENSE_STATUS_ERR_MASK       (CY_CAPSENSE_STATUS_ERR_SIZE << CY_CAPSENSE_STATUS_ERR_SHIFT)


/* WD_STATIC_CONFIG bit fields */

/* Bit 0: The sense/Tx frequency selection: 
 * 0 - Common, 
 * 1 - Individual (per widget). */
#define CY_CAPSENSE_SNS_FREQ_SIZE         (0x00000001Lu)
#define CY_CAPSENSE_SNS_FREQ_SHIFT        (0u)
#define CY_CAPSENSE_SNS_FREQ_MASK         (CY_CAPSENSE_SNS_FREQ_SIZE << CY_CAPSENSE_SNS_FREQ_SHIFT)

/* Bit 1: Duplexing Enable/Disable for linear sliders. */
#define CY_CAPSENSE_DIPLEXING_SIZE        (0x00000001Lu)
#define CY_CAPSENSE_DIPLEXING_SHIFT       (1u)
#define CY_CAPSENSE_DIPLEXING_MASK        (CY_CAPSENSE_DIPLEXING_SIZE << CY_CAPSENSE_DIPLEXING_SHIFT)

/* Bit 2: The widget contains a sensor ganged to other sensors. */
#define CY_CAPSENSE_GANGED_SNS_SIZE       (0x00000001Lu)
#define CY_CAPSENSE_GANGED_SNS_SHIFT      (2u)
#define CY_CAPSENSE_GANGED_SNS_MASK       (CY_CAPSENSE_GANGED_SNS_SIZE << CY_CAPSENSE_GANGED_SNS_SHIFT)

/* Bit 3: Some pin from this widget is used by other sensors to make 
 * a ganged sensor. */
#define CY_CAPSENSE_SHARED_IO_SIZE        (0x00000001Lu)
#define CY_CAPSENSE_SHARED_IO_SHIFT       (3u)
#define CY_CAPSENSE_SHARED_IO_MASK        (CY_CAPSENSE_SHARED_IO_SIZE << CY_CAPSENSE_SHARED_IO_SHIFT)

/* Bit 4: The centroid position IIR filter Enable/Disable. */
#define CY_CAPSENSE_POS_IIR_FILTER_SIZE   (0x00000001Lu)
#define CY_CAPSENSE_POS_IIR_FILTER_SHIFT  (4u)
#define CY_CAPSENSE_POS_IIR_FILTER_MASK   (CY_CAPSENSE_POS_IIR_FILTER_SIZE << CY_CAPSENSE_POS_IIR_FILTER_SHIFT)

/* Bit 5: The centroid position median filter Enable/Disable. */
#define CY_CAPSENSE_POS_MEDIAN_FILTER_SIZE (0x00000001Lu)
#define CY_CAPSENSE_POS_MEDIAN_FILTER_SHIFT (5u)
#define CY_CAPSENSE_POS_MEDIAN_FILTER_MASK (CY_CAPSENSE_POS_MEDIAN_FILTER_SIZE << CY_CAPSENSE_POS_MEDIAN_FILTER_SHIFT)

/* Bit 6: The centroid position average filter Enable/Disable. */
#define CY_CAPSENSE_POS_AVERAGE_FILTER_SIZE (0x00000001Lu)
#define CY_CAPSENSE_POS_AVERAGE_FILTER_SHIFT (6u)
#define CY_CAPSENSE_POS_AVERAGE_FILTER_MASK (CY_CAPSENSE_POS_AVERAGE_FILTER_SIZE << CY_CAPSENSE_POS_AVERAGE_FILTER_SHIFT)

/* Bit 7: The centroid position jitter filter Enable/Disable. */
#define CY_CAPSENSE_POS_JITTER_FILTER_SIZE (0x00000001Lu)
#define CY_CAPSENSE_POS_JITTER_FILTER_SHIFT (7u)
#define CY_CAPSENSE_POS_JITTER_FILTER_MASK (CY_CAPSENSE_POS_JITTER_FILTER_SIZE << CY_CAPSENSE_POS_JITTER_FILTER_SHIFT)

/* Bit 8: The multiphase Tx scan Enable (CSX widgets only). */
#define CY_CAPSENSE_MULTIPHASE_TX_SIZE    (0x00000001Lu)
#define CY_CAPSENSE_MULTIPHASE_TX_SHIFT   (8u)
#define CY_CAPSENSE_MULTIPHASE_TX_MASK    (CY_CAPSENSE_MULTIPHASE_TX_SIZE << CY_CAPSENSE_MULTIPHASE_TX_SHIFT)

/* Bit 9: The centroid position adaptive IIR filter Enable/Disable. */
#define CY_CAPSENSE_AIIR_FILTER_SIZE      (0x00000001Lu)
#define CY_CAPSENSE_AIIR_FILTER_SHIFT     (9u)
#define CY_CAPSENSE_AIIR_FILTER_MASK      (CY_CAPSENSE_AIIR_FILTER_SIZE << CY_CAPSENSE_AIIR_FILTER_SHIFT)

/* Bit 10: Ballistic multiplier Enable/Disable. */
#define CY_CAPSENSE_BALLISTIC_SIZE        (0x00000001Lu)
#define CY_CAPSENSE_BALLISTIC_SHIFT       (10u)
#define CY_CAPSENSE_BALLISTIC_MASK        (CY_CAPSENSE_BALLISTIC_SIZE << CY_CAPSENSE_BALLISTIC_SHIFT)

/* Bit 11: 3x3 centroid Enable/Disable. */
#define CY_CAPSENSE_CENTROID_3X3_SIZE     (0x00000001Lu)
#define CY_CAPSENSE_CENTROID_3X3_SHIFT    (11u)
#define CY_CAPSENSE_CENTROID_3X3_MASK     (CY_CAPSENSE_CENTROID_3X3_SIZE << CY_CAPSENSE_CENTROID_3X3_SHIFT)

/* Bit 12: 5x5 centroid Enable/Disable. */
#define CY_CAPSENSE_CENTROID_5X5_SIZE     (0x00000001Lu)
#define CY_CAPSENSE_CENTROID_5X5_SHIFT    (12u)
#define CY_CAPSENSE_CENTROID_5X5_MASK     (CY_CAPSENSE_CENTROID_5X5_SIZE << CY_CAPSENSE_CENTROID_5X5_SHIFT)

/* Bit 13: Edge correction Enable/Disable. */
#define CY_CAPSENSE_EDGE_CORRECTION_SIZE  (0x00000001Lu)
#define CY_CAPSENSE_EDGE_CORRECTION_SHIFT (13u)
#define CY_CAPSENSE_EDGE_CORRECTION_MASK  (CY_CAPSENSE_EDGE_CORRECTION_SIZE << CY_CAPSENSE_EDGE_CORRECTION_SHIFT)

/* Bit 14: Two finger detection Enable/Disable. */
#define CY_CAPSENSE_TWO_FINGER_DETECTION_SIZE (0x00000001Lu)
#define CY_CAPSENSE_TWO_FINGER_DETECTION_SHIFT (14u)
#define CY_CAPSENSE_TWO_FINGER_DETECTION_MASK (CY_CAPSENSE_TWO_FINGER_DETECTION_SIZE << CY_CAPSENSE_TWO_FINGER_DETECTION_SHIFT)


/*
CAPSENSE_CONFIG_START
<?xml version="1.0"?>
<Configuration major="1" minor="0">
    <GeneralProperties>
        <Property id="REGULAR_IIR_RC_N" value="128"/>
        <Property id="REGULAR_RC_AVERAGE_FILTER_EN" value="false"/>
        <Property id="REGULAR_RC_IIR_FILTER_EN" value="false"/>
        <Property id="REGULAR_RC_MEDIAN_FILTER_EN" value="true"/>
        <Property id="PROX_IIR_RC_N" value="128"/>
        <Property id="PROX_RC_AVERAGE_FILTER_EN" value="false"/>
        <Property id="PROX_RC_IIR_FILTER_EN" value="false"/>
        <Property id="PROX_RC_MEDIAN_FILTER_EN" value="false"/>
        <Property id="BASELINE_TYPE" value="IIR"/>
        <Property id="PROX_IIR_BL_N" value="1"/>
        <Property id="REGULAR_IIR_BL_N" value="1"/>
        <Property id="BLOCK_OFF_AFTER_SCAN_EN" value="false"/>
        <Property id="MULTI_FREQ_SCAN_EN" value="false"/>
        <Property id="SELF_TEST_EN" value="false"/>
        <Property id="SENSOR_AUTO_RESET_EN" value="true"/>
        <Property id="SENSOR_AUTO_RESET_METHOD" value="BASELINE"/>
        <Property id="SLIDER_MULTIPLIER" value="SNS_NUM_MINUS_1"/>
        <Property id="TOUCHPAD_MULTIPLIER" value="SNS_NUM_MINUS_1"/>
    </GeneralProperties>
    <CsdProperties>
        <Property id="CSD_AUTOTUNE" value="HWTH"/>
        <Property id="CSD_COMMON_SNS_CLK_EN" value="false"/>
        <Property id="CSD_MOD_CLK_DIVIDER" value="8"/>
        <Property id="CSD_SNS_CLK_DIVIDER" value="8"/>
        <Property id="CSD_SNS_CLK_SOURCE" value="AUTO"/>
        <Property id="CSD_IDAC_AUTOCAL_EN" value="true"/>
        <Property id="CSD_IDAC_COMP_EN" value="true"/>
        <Property id="CSD_IDAC_CONFIG" value="SOURCING"/>
        <Property id="CSD_IDAC_GAIN" value="MEDIUM"/>
        <Property id="CSD_INACTIVE_SNS_CONNECTION" value="GROUND"/>
        <Property id="CSD_SHIELD_DELAY" value="NO_DELAY"/>
        <Property id="CSD_SHIELD_EN" value="false"/>
        <Property id="CSD_SHIELD_SWITCH_RES" value="MEDIUM"/>
        <Property id="CSD_SHIELD_TANK_EN" value="false"/>
        <Property id="CSD_TOTAL_SHIELD_COUNT" value="1"/>
    </CsdProperties>
    <CsxProperties>
        <Property id="CSX_COMMON_TX_CLK_EN" value="false"/>
        <Property id="CSX_MOD_CLK_DIVIDER" value="2"/>
        <Property id="CSX_TX_CLK_DIVIDER" value="42"/>
        <Property id="CSX_TX_CLK_SOURCE" value="AUTO"/>
        <Property id="CSX_IDAC_AUTOCAL_EN" value="true"/>
        <Property id="CSX_IDAC_GAIN" value="MEDIUM"/>
        <Property id="CSX_MAX_FINGERS" value="1"/>
    </CsxProperties>
    <Widgets>
        <Widget id="Button0" type="CSX_BUTTON">
            <WidgetProperties>
                <Property id="DIPLEXING" value="false"/>
                <Property id="MAX_POS_X" value="100"/>
                <Property id="MAX_POS_Y" value="100"/>
                <Property id="FINGER_CP" value="0.30000000000000004"/>
                <Property id="IDAC_MOD" value="32"/>
                <Property id="NUM_CONV" value="100"/>
                <Property id="RESOLUTION" value="RES12BIT"/>
                <Property id="ROW_IDAC_MOD" value="32"/>
                <Property id="ROW_SNS_CLK" value="2"/>
                <Property id="SNS_CLK" value="2"/>
                <Property id="TX_CLK" value="42"/>
                <Property id="BSLN_RST" value="1000"/>
                <Property id="BSLN_TH" value="100"/>
                <Property id="FINGER_TH" value="90"/>
                <Property id="HYSTERESIS" value="20"/>
                <Property id="LOW_BSLN_RST" value="30"/>
                <Property id="NNOISE_TH" value="40"/>
                <Property id="NOISE_TH" value="40"/>
                <Property id="ON_DEBOUNCE" value="3"/>
                <Property id="PROX_TOUCH_TH" value="200"/>
                <Property id="VELOCITY" value="2500"/>
                <Property id="AVG_FILTER" value="false"/>
                <Property id="IIR_FILTER" value="false"/>
                <Property id="IIR_FILTER_COEFF" value="128"/>
                <Property id="JITTER_FILTER" value="false"/>
                <Property id="MEDIAN_FILTER" value="false"/>
            </WidgetProperties>
            <Electrodes>
                <Electrode id="Rx0" kind="Column"/>
                <Electrode id="Tx" kind="Row"/>
            </Electrodes>
            <Sensors>
                <Sensor id="Rx0" idac="32"/>
            </Sensors>
        </Widget>
        <Widget id="LinearSlider0" type="LINEAR_SLIDER">
            <WidgetProperties>
                <Property id="DIPLEXING" value="false"/>
                <Property id="MAX_POS_X" value="100"/>
                <Property id="MAX_POS_Y" value="100"/>
                <Property id="FINGER_CP" value="0.1"/>
                <Property id="IDAC_MOD" value="32"/>
                <Property id="NUM_CONV" value="100"/>
                <Property id="RESOLUTION" value="RES12BIT"/>
                <Property id="ROW_IDAC_MOD" value="32"/>
                <Property id="ROW_SNS_CLK" value="2"/>
                <Property id="SNS_CLK" value="4"/>
                <Property id="TX_CLK" value="2"/>
                <Property id="BSLN_RST" value="1000"/>
                <Property id="BSLN_TH" value="100"/>
                <Property id="FINGER_TH" value="100"/>
                <Property id="HYSTERESIS" value="10"/>
                <Property id="LOW_BSLN_RST" value="30"/>
                <Property id="NNOISE_TH" value="40"/>
                <Property id="NOISE_TH" value="40"/>
                <Property id="ON_DEBOUNCE" value="3"/>
                <Property id="PROX_TOUCH_TH" value="200"/>
                <Property id="VELOCITY" value="2500"/>
                <Property id="AVG_FILTER" value="false"/>
                <Property id="IIR_FILTER" value="true"/>
                <Property id="IIR_FILTER_COEFF" value="128"/>
                <Property id="JITTER_FILTER" value="false"/>
                <Property id="MEDIAN_FILTER" value="false"/>
            </WidgetProperties>
            <Electrodes>
                <Electrode id="Sns0" kind="Sensor"/>
                <Electrode id="Sns1" kind="Sensor"/>
                <Electrode id="Sns2" kind="Sensor"/>
                <Electrode id="Sns3" kind="Sensor"/>
                <Electrode id="Sns4" kind="Sensor"/>
            </Electrodes>
            <Sensors>
                <Sensor id="Sns0" idac="32"/>
                <Sensor id="Sns1" idac="32"/>
                <Sensor id="Sns2" idac="32"/>
                <Sensor id="Sns3" idac="32"/>
                <Sensor id="Sns4" idac="32"/>
            </Sensors>
        </Widget>
    </Widgets>
    <Pins>
        <Pin id="Cmod" location="ioss[0].port[7].pin[7].analog[0]"/>
        <Pin id="CintA" location="ioss[0].port[7].pin[1].analog[0]"/>
        <Pin id="CintB" location="ioss[0].port[7].pin[2].analog[0]"/>
        <Pin id="Button0_Rx0" location="ioss[0].port[8].pin[1].analog[0]"/>
        <Pin id="Button0_Tx" location="ioss[0].port[1].pin[0].analog[0]"/>
        <Pin id="LinearSlider0_Sns0" location="ioss[0].port[8].pin[3].analog[0]"/>
        <Pin id="LinearSlider0_Sns1" location="ioss[0].port[8].pin[4].analog[0]"/>
        <Pin id="LinearSlider0_Sns2" location="ioss[0].port[8].pin[5].analog[0]"/>
        <Pin id="LinearSlider0_Sns3" location="ioss[0].port[8].pin[6].analog[0]"/>
        <Pin id="LinearSlider0_Sns4" location="ioss[0].port[8].pin[7].analog[0]"/>
    </Pins>
</Configuration>
CAPSENSE_CONFIG_END
*/

#if defined(__cplusplus)
}
#endif

#endif /* CYCFG_CAPSENSE_H */

/* [] END OF FILE */

